{
  "Description": {
    "Behavior Tree Reference allows you to run another behavior tree within the current behavior tree.": "行为树引用允许您在当前行为树中运行另一个行为树。",
    "Returns a TaskStatus of running. Will only stop when interrupted or a conditional abort is triggered.": "返回运行的任务状态。仅在中断或触发条件中止时停止。",
    "Log is a simple task which will output the specified text and return success. It can be used for debugging.": "日志是一个简单的任务，它将输出指定的文本并返回成功。它可用于调试。",
    "LogFormat is analgous to Debug.LogFormat().It takes format string, substitutes arguments supplied a '{0-4}' and returns success.\nAny fields or arguments not supplied are ignored.It can be used for debugging.": "LogFormat类似于Debug.LogFormat()。\n它接受格式字符串，替换提供的参数'{0-4}'并返回成功。\n未提供的任何字段或参数都将被忽略。它可用于调试。",
    "Perform the actual interruption. This will immediately stop the specified tasks from running and will return success or failure depending on the value of interrupt success.": "执行真实的中断。这将立即阻止指定的任务运行，并根据中断的结果返回成功或失败。",
    "Restarts a behavior tree, returns success after it has been restarted.": "重新启动行为树，在重新启动后返回成功。",
    "Sends an event to the behavior tree, returns success after sending the event.": "将事件发送到行为树，发送事件后返回成功。",
    "Allows multiple action tasks to be added to a single node.": "允许将多个操作任务添加到一个节点中。",
    "Start a new behavior tree and return success after it has been started.": "开始新的行为树并在开始后返回成功。",
    "Pause or disable a behavior tree and return success after it has been stopped.": "停止或禁用行为树并在停止后返回成功。",
    "Wait a specified amount of time. The task will return running until the task is done waiting. It will return success after the wait time has elapsed.": "等待指定的时间。任务将在等待结束后运行。等待时间过去后，它将返回成功。",
    "Gets the value from the field specified. Returns success if the field was retrieved.": "从指定的字段获取值。如果检索到返回成功。",
    "Gets the value from the property specified. Returns success if the property was retrieved.": "从指定的属性获取值。如果检索到返回成功。",
    "Invokes the specified method with the specified parameters. Can optionally store the return value. Returns success if the method was invoked.": "使用指定参数调用指定的方法。可以选择存储返回值。如果调用了方法返回成功。",
    "Sets the field to the value specified. Returns success if the field was set.": "将字段设置为指定的值。如果设置了字段返回成功。",
    "Sets the property to the value specified. Returns success if the property was set.": "将属性设置为指定的值。如果设置了属性返回成功。",
    "Similar to the sequence task, the parallel task will run each child task until a child task returns failure. The difference is that the parallel task will run all of its children tasks simultaneously versus running each task one at a time. Like the sequence class, the parallel task will return success once all of its children tasks have return success. If one tasks returns failure the parallel task will end all of the child tasks and return failure.": "与序列任务类似，并行任务将运行每个子任务，直到子任务返回失败。不同之处在于，并行任务将同时运行其所有子任务，而不是一次运行一个任务。像序列类一样，一旦其所有子任务返回成功，并行任务将返回成功。如果一个任务返回失败，则并行任务将结束所有子任务并返回失败。",
    "Similar to the parallel selector task, except the parallel complete task will return the child status as soon as the child returns success or failure.The child tasks are executed simultaneously.": "类似于并行选择器任务，除了并行完成任务外，一旦子任务返回成功或失败，将立即返回子任务的状态。子任务是同时执行的。",
    "Similar to the selector task, the parallel selector task will return success as soon as a child task returns success. The difference is that the parallel task will run all of its children tasks simultaneously versus running each task one at a time. If one tasks returns success the parallel selector task will end all of the child tasks and return success. If every child task returns failure then the parallel selector task will return failure.": "与选择器任务类似，并行选择器任务将在一个子任务返回成功后立即返回成功。不同之处在于，并行任务将同时运行其所有子任务，而不是一次运行一个任务。如果一个任务返回成功，则并行选择器任务将结束所有子任务并返回成功。如果每个子任务都返回失败，则并行选择器任务将返回失败。",
    "Similar to the selector task, the priority selector task will return success as soon as a child task returns success. Instead of running the tasks sequentially from left to right within the tree, the priority selector will ask the task what its priority is to determine the order. The higher priority tasks have a higher chance at being run first.": "与选择器任务类似，优先选择器任务将在一个子任务返回成功后立即返回成功。优先级选择器将判断任务的优先级以确定顺序，而不是从左到右依次运行任务。高优先级的任务首先运行的机会更高。",
    "Similar to the selector task, the random selector task will return success as soon as a child task returns success.  The difference is that the random selector class will run its children in a random order. The selector task is deterministic in that it will always run the tasks from left to right within the tree. The random selector task shuffles the child tasks up and then begins execution in a random order. Other than that the random selector class is the same as the selector class. It will continue running tasks until a task completes successfully. If no child tasks return success then it will return failure.": "与选择器任务类似，随机选择器任务将在一个子任务返回成功后立即返回成功。不同之处在于，随机选择器类将以随机顺序运行其子任务。选择器任务是确定性的，因为它将始终从树内的从左到右运行任务。随机选择器任务将打乱子任务，然后按随机顺序开始执行。除此之外，随机选择器类与选择器类相同。它将继续运行任务，直到任务成功完成。如果没有子任务返回成功，则它将返回失败。",
    "Similar to the sequence task, the random sequence task will return success as soon as every child task returns success.  The difference is that the random sequence class will run its children in a random order. The sequence task is deterministic in that it will always run the tasks from left to right within the tree. The random sequence task shuffles the child tasks up and then begins execution in a random order. Other than that the random sequence class is the same as the sequence class. It will stop running tasks as soon as a single task ends in failure. On a task failure it will stop executing all of the child tasks and return failure. If no child returns failure then it will return success.": "与序列任务类似，随机序列任务将在所有子任务返回成功后立即返回成功。不同之处在于，随机序列类将以随机顺序运行其子任务。序列任务是确定性的，因为它将始终从树内的从左到右运行任务。随机序列任务将打乱子任务，然后按随机顺序开始执行。除此之外，随机序列类与序列类相同。一旦一个任务以失败结束，它将停止运行任务。在任务失败时，它将停止执行所有子任务并返回失败。如果没有子任务返回失败，那么它将返回成功。",
    "The selector task is similar to an \"or\" operation. It will return success as soon as one of its child tasks return success. If a child task returns failure then it will sequentially run the next task. If no child task returns success then it will return failure.": "选择器任务类似于“或”操作。一旦其子任务之一返回成功，它将立即返回成功。如果子任务返回失败，则将顺序运行下一个任务。如果没有子任务返回成功，那么它将返回失败。",
    "The selector evaluator is a selector task which reevaluates its children every tick. It will run the lowest priority child which returns a task status of running. This is done each tick. If a higher priority child is running and the next frame a lower priority child wants to run it will interrupt the higher priority child. The selector evaluator will return success as soon as the first child returns success otherwise it will keep trying higher priority children. This task mimics the conditional abort functionality except the child tasks don't always have to be conditional tasks.": "选择器评估器是一个选择器任务，它在每个周期重新评估其子任务。它将运行优先级最低的子任务，并返回任务状态正在运行（running）。每个周期都会这样做。如果一个较高优先级的子任务正在运行，而下一个较低优先级的子任务想要运行，它将中断较高优先级的子任务。一旦第一个子任务返回成功，选择器评估器将返回成功，否则它将继续尝试更高优先级的子任务。此任务模仿条件中止功能，但子任务不一定总是条件任务。",
    "The sequence task is similar to an \"and\" operation. It will return failure as soon as one of its child tasks return failure. If a child task returns success then it will sequentially run the next task. If all child tasks return success then it will return success.": "序列任务类似于“与”操作。一旦其子任务之一返回失败，它将立即返回失败。如果子任务返回成功，则将顺序运行下一个任务。如果所有子任务都返回成功，那么它将返回成功。",
    "The utility selector task evaluates the child tasks using Utility Theory AI. The child task can override the GetUtility method and return the utility value at that particular time. The task with the highest utility value will be selected and the existing running task will be aborted. The utility selector task reevaluates its children every tick.": "效用选择器任务使用效用理论AI评估子任务。子任务可以重写GetUtility方法，并在特定时间返回效用值。将选择效用值最高的任务，现有运行任务将被中止。效用选择器任务会在每个周期时重新评估其子任务。",
    "Returns success as soon as the event specified by eventName has been received.": "收到指定名称的事件后，返回成功。",
    "The random probability task will return success when the random probability is below the succeed probability. It will otherwise return failure.": "当随机概率低于成功概率时，随机概率任务将返回成功。否则它将返回失败。",
    "Allows multiple conditional tasks to be added to a single node.": "允许将多个条件任务添加到一个节点中。",
    "Returns success when a collision starts. This task will only receive the physics callback if it is being reevaluated (with a conditional abort or under a parallel task).": "碰撞开始时返回成功。此任务仅在重新评估（有条件终止或在并行任务下）时才接收物理回调。",
    "Returns success when a 2D collision starts. This task will only receive the physics callback if it is being reevaluated (with a conditional abort or under a parallel task).": "2D碰撞开始时返回成功。此任务仅在重新评估（有条件终止或在并行任务下）时才接收物理回调。",
    "Returns success when an object enters the trigger. This task will only receive the physics callback if it is being reevaluated (with a conditional abort or under a parallel task).": "当对象进入触发器时，返回成功。此任务仅在重新评估（有条件终止或在并行任务下）时才接收物理回调。",
    "Returns success when an object enters the 2D trigger. This task will only receive the physics callback if it is being reevaluated (with a conditional abort or under a parallel task).": "当对象进入2D触发器时，返回成功。此任务仅在重新评估（有条件终止或在并行任务下）时才接收物理回调。",
    "Returns success when a collision ends. This task will only receive the physics callback if it is being reevaluated (with a conditional abort or under a parallel task).": "碰撞结束时返回成功。此任务仅在重新评估（有条件终止或在并行任务下）时才接收物理回调。",
    "Returns success when a 2D collision ends. This task will only receive the physics callback if it is being reevaluated (with a conditional abort or under a parallel task).": "2D碰撞结束时返回成功。此任务仅在重新评估（有条件终止或在并行任务下）时才接收物理回调。",
    "Returns success when an object exits the trigger. This task will only receive the physics callback if it is being reevaluated (with a conditional abort or under a parallel task).": "当对象退出触发器时，返回成功。此任务仅在重新评估（有条件终止或在并行任务下）时才接收物理回调。",
    "Returns success when an object exits the 2D trigger. This task will only receive the physics callback if it is being reevaluated (with a conditional abort or under a parallel task).": "当对象退出2D触发器时，返回成功。此任务仅在重新评估（有条件终止或在并行任务下）时才接收物理回调。",
    "Compares the field value to the value specified. Returns success if the values are the same.": "将字段值与指定的值进行比较。如果值相同，则返回成功。",
    "Evaluates the specified conditional task. If the conditional task returns success then the child task is run and the child status is returned. If the conditional task does not return success then the child task is not run and a failure status is immediately returned.": "计算指定的条件任务。如果条件任务返回成功，则运行子任务并返回子任务的结果。如果条件任务未返回成功，则子任务不会运行，并立即返回失败。",
    "Waits the specified duration after the child has completed before returning the child's status of success or failure.": "在子任务完成后，等待指定的持续时间，然后再返回子任务成功或失败的结果。",
    "The interrupt task will stop all child tasks from running if it is interrupted. The interruption can be triggered by the perform interruption task. The interrupt task will keep running its child until this interruption is called. If no interruption happens and the child task completed its execution the interrupt task will return the value assigned by the child task.": "中断任务将停止所有子任务运行。可以通过执行中断任务触发中断。中断任务将继续运行其子任务，直到调用此中断为止。如果没有中断并且子任务完成其执行，则中断任务将返回子任务的结果。",
    "The inverter task will invert the return value of the child task after it has finished executing. If the child returns success, the inverter task will return failure. If the child returns failure, the inverter task will return success.": "反向器任务将在子任务完成执行后反向子任务的返回值。如果子级返回成功，则反向器任务将返回失败。如果子任务返回失败，则反向器任务将返回成功。",
    "The repeater task will repeat execution of its child task until the child task has been run a specified number of times. It has the option of continuing to execute the child task even if the child task returns a failure.": "中继器任务将重复执行其子任务，直到运行指定数量的子任务为止。即使子任务返回失败，它也可以选择继续执行子任务。",
    "The return failure task will always return failure except when the child task is running.": "返回失败任务将始终返回失败，除非子任务运行。",
    "The return success task will always return success except when the child task is running.": "返回成功任务将始终返回成功，除非子任务运行。",
    "The task guard task is similar to a semaphore in multithreaded programming. The task guard task is there to ensure a limited resource is not being overused. \n\nFor example, you may place a task guard above a task that plays an animation. Elsewhere within your behavior tree you may also have another task that plays a different animation but uses the same bones for that animation. Because of this you don't want that animation to play twice at the same time. Placing a task guard will let you specify how many times a particular task can be accessed at the same time.\n\nIn the previous animation task example you would specify an access count of 1. With this setup the animation task can be only controlled by one task at a time. If the first task is playing the animation and a second task wants to control the animation as well, it will either have to wait or skip over the task completely.": "任务保护任务类似于多线程编程中的信号量。在那里，任务保护任务是为了确保没有过度使用的有限资源。\n\n例如，您可以将任务保护放在播放动画的任务上方。在行为树中的其他位置，您可能还有另一个任务，该任务播放不同的动画，但对该动画使用相同的骨骼。因此，您不希望该动画同时播放两次。放置任务保护可以让您指定同时访问特定任务的次数。\n\n在前面的动画任务示例中，您将指定访问计数1。使用此设置，动画任务一次只能由一个任务控制。如果第一个任务正在播放动画，而第二个任务也要控制动画，则它必须等待或完全跳过该任务。",
    "The until failure task will keep executing its child task until the child task returns failure.": "直到失败任务将继续执行其子任务，直到子任务返回失败。",
    "The until success task will keep executing its child task until the child task returns success.": "直到成功任务将继续执行其子任务，直到子任务返回成功。",

    "Move towards the specified position. The position can either be specified by a transform or position. If the transform is used then the position will not be used.": "移动到指定位置。位置可以通过变换（Transform）或具体位置指定。如果使用变换，则不会使用具体位置。",
    "Rotates towards the specified rotation. The rotation can either be specified by a transform or rotation. If the transform is used then the rotation will not be used.": "旋转到指定旋转角度。旋转可以通过变换（Transform）或具体旋转角度指定。如果使用变换，则不会使用具体旋转角度。",
    "Seek the target specified using the Unity NavMesh.": "使用 Unity NavMesh 寻找指定目标。",
    "Flee from the target specified using the Unity NavMesh.": "使用 Unity NavMesh 逃离指定目标。",
    "Pursue the target specified using the Unity NavMesh.": "使用 Unity NavMesh 追逐指定目标。",
    "Evade the target specified using the Unity NavMesh.": "使用 Unity NavMesh 躲避指定目标。",
    "Follows the specified target using the Unity NavMesh.": "使用 Unity NavMesh 跟随指定目标。",
    "Patrol around the specified waypoints using the Unity NavMesh.": "使用 Unity NavMesh 在指定路径点之间巡逻。",
    "Find a place to hide and move to it using the Unity NavMesh.": "使用 Unity NavMesh 找到一个藏身点并移动到该位置。",
    "Wander using the Unity NavMesh.": "使用 Unity NavMesh 随机漫游。",
    "Search for a target by combining the wander, within hearing range, and the within seeing range tasks using the Unity NavMesh.": "使用 Unity NavMesh 结合漫游、听觉范围和视觉范围任务搜索目标。",
    "Check to see if the any object specified by the object list or tag is within the distance specified of the current agent.": "检查是否有任何由对象列表或标签指定的对象在当前代理的指定距离内。",
    "Check to see if the any objects are within sight of the agent.": "检查是否有任何对象在代理的视线范围内。",
    "Check to see if the any objects are within hearing range of the current agent.": "检查是否有任何对象在当前代理的听觉范围内。",
    "Flock around the scene using the Unity NavMesh.": "使用 Unity NavMesh 在场景中群体移动。",
    "Follow the leader using the Unity NavMesh.": "使用 Unity NavMesh 跟随领导者。",
    "Queue in a line using the Unity NavMesh.": "使用 Unity NavMesh 排队成一列。"
    
  },
"TaskName": {
  "BehaviorTreeReference": "行为树引用",
  "Idle": "状态",
  "Log": "日志",
  "LogFormat": "日志格式",
  "PerformInterruption": "执行中断",
  "RestartBehaviorTree": "重新启动行为树",
  "SendEvent": "发送事件",
  "StackedAction": "堆叠操作",
  "StartBehaviorTree": "开始行为树",
  "StopBehaviorTree": "停止行为树",
  "Wait": "等待",
  "GetFieldValue": "获取字段值",
  "GetPropertyValue": "获取属性值",
  "InvokeMethod": "调用方法",
  "SetFieldValue": "设置字段值",
  "SetPropertyValue": "设置属性值",
  "Parallel": "并行",
  "ParallelComplete": "并行完成",
  "ParallelSelector": "并行选择器",
  "PrioritySelector": "优先选择器",
  "RandomSelector": "随机选择器",
  "RandomSequence": "随机序列",
  "Selector": "选择器",
  "SelectorEvaluator": "选择器评估器",
  "Sequence": "序列",
  "UtilitySelector": "效用选择器",
  "HasReceivedEvent": "已接收事件",
  "RandomProbability": "随机概率",
  "StackedConditional": "堆叠条件",
  "HasEnteredCollision": "进入碰撞器",
  "HasEnteredCollision2D": "进入2D碰撞器",
  "HasEnteredTrigger": "进入触发器",
  "HasEnteredTrigger2D": "进入2D触发器",
  "HasExitedCollision": "退出碰撞器",
  "HasExitedCollision2D": "退出2D碰撞器",
  "HasExitedTrigger": "退出触发器",
  "HasExitedTrigger2D": "退出2D触发器",
  "CompareFieldValue": "比较字段值",
  "ConditionalEvaluator": "条件计算器",
  "Cooldown": "冷却",
  "Interrupt": "中断",
  "Inverter": "反向器",
  "Repeater": "中继器",
  "ReturnFailure": "返回失败",
  "ReturnSuccess": "返回成功",
  "TaskGuard": "任务保护",
  "UntilFailure": "直到失败",
  "UntilSuccess": "直到成功",

  "MoveTowards": "向前运动",
  "RotateTowards": "向前旋转",
  "Seek": "搜寻",
  "Flee": "逃走",
  "Pursue": "追踪",
  "Evade": "躲避",
  "Follow": "跟随",
  "Patrol": "巡逻",
  "Cover": "掩护",
  "Wander": "游荡",
  "Search": "搜索",
  "WithinDistance": "距离内",
  "CanSeeObject": "能看到对象",
  "CanHearObject": "能听到对象",
  "Flock": "群聚",
  "LeaderFollow": "跟随队长",
  "Queue": "队列"
}
}

